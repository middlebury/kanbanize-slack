#!/usr/bin/env php
<?php

require_once(dirname(__FILE__)."/../config.php");
require_once(dirname(__FILE__)."/../lib/autoload.php");

date_default_timezone_set("UTC");

// Fetch activity for all configured boards.
$activity = array();

if (empty($config['KANBANIZE']['API_KEY'])) {
  throw new Exception("\$config['KANBANIZE']['API_KEY'] must be defined in config.php");
}
if (empty($config['KANBANIZE']['SUBDOMAIN'])) {
  throw new Exception("\$config['KANBANIZE']['SUBDOMAIN'] must be defined in config.php");
}
$kanbanize = new Kanbanize_ActivityStream($config['KANBANIZE']['SUBDOMAIN'], $config['KANBANIZE']['API_KEY']);
if (empty($config['KANBANIZE']['BOARDS']) || !is_array($config['KANBANIZE']['BOARDS'])) {
  throw new Exception("\$config['KANBANIZE']['BOARDS'] must be an array of integer board-ids");
}
foreach ($config['KANBANIZE']['BOARDS'] as $board_id) {
  if (!is_int($board_id)) {
    throw new Exception("\$config['KANBANIZE']['BOARDS'] must be an array of integer board-ids");
  }
  $activity = array_merge($activity, $kanbanize->get_new_activity_for_board($board_id));
}

// Group all of the activity
$groups = array();
foreach ($activity as $item) {
  if (empty($item['taskid'])) {
    $groups['other'][] = $item;
  } else {
    $groups[$item['taskid']][] = $item;
  }
}

// Send activity to slack
if (empty($config['SLACK_ORGS'])) {
  throw new Exception("You must define at least one Slack organization in \$config['SLACK_ORGS']");
}
foreach ($config['SLACK_ORGS'] as $org_name => $org_opts) {
  if (empty($org_opts['WEBHOOK_URL'])) {
    throw new Exception("\$config['SLACK_ORGS']['$org_name']['WEBHOOK_URL'] must be a URL.");
  }
  $slack = new Slack_Router($org_opts['WEBHOOK_URL']);

  // Add our destination channels/filters.
  if (empty($org_opts['DESTINATIONS'])) {
    throw new Exception("\$config['SLACK_ORGS']['$org_name']['DESTINATIONS'] must be an array of destination channels/filters.");
  }
  foreach ($org_opts['DESTINATIONS'] as $channel => $dest) {
    if (empty($dest['CLASS'])) {
      throw new Exception("\$config['SLACK_ORGS']['$org_name']['DESTINATIONS']['$channel']['CLASS'] must be a valid class and not empty.");
    }
    if (!class_exists($dest['CLASS'])) {
      throw new Exception("\$config['SLACK_ORGS']['$org_name']['DESTINATIONS']['$channel']['CLASS'] must be a valid class.");
    }
    $reflector = new ReflectionClass($dest['CLASS']);
    $args = array($channel);
    if (!empty($dest['ARGS'])) {
      if (!is_array($dest['ARGS'])) {
        throw new Exception("\$config['SLACK_ORGS']['$org_name']['DESTINATIONS']['$channel']['ARGS'] must be an array of arguments.");
      }
      $args = array_merge($args, $dest['ARGS']);
    }
    $slack->add_destination($reflector->newInstanceArgs($args));
  }

  // Add our formatters
  $slack->add_formatter(new Slack_Formatter_Kanbanize('Kanbanize', 'https://lh5.ggpht.com/aoUf1ZvpVeACwH2TBy0nP_Ipv53PtVnU42vCuutBDqCKcnfp5j78wUfBm41zix88_BM=w300'));

  // Route our activities to our destinations.
  $slack->route_activities($groups);
}
